#pragma once
#include "core/ray.h"
#include "core/hit_record.h"

namespace cobra
{
    /**
     * @class material
     * @brief Abstract base class representing a material in a ray tracing context.
     *
     * Materials define how rays interact with surfaces. This base class provides the interface for
     * scattering behavior, such as reflection, refraction, or diffusion.
     * Derived classes must implement the `scatter` function to define their specific behavior.
     */
    class material
    {
    public:
        /// Virtual destructor to ensure proper cleanup of derived material classes.
        virtual ~material() = default;

        /**
         * @brief Computes how an incoming ray scatters upon hitting a surface.
         *
         * This method will be overridden by derived material types (e.g., Lambertian, Metal, Dielectric).
         *
         * @param r_in The incoming ray that hit the surface.
         * @param rec A hit record containing details of the intersection.
         * @param attenuation The attenuation (color) applied to the scattered ray.
         * @param scattered The scattered ray generated by the material.
         * @return True if the ray is scattered, false otherwise.
         */
        virtual bool scatter(
            const ray &r_in, const hit_record &rec, vec3 &attenuation, ray &scattered) const = 0;
    };
}
