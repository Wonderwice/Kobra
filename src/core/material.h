#pragma once
#include "core/ray.h"
#include "core/hit_record.h"
#include "core/pdf.h"

namespace cobra

{

    class scatter_record
    {
    public:
        vec3 attenuation;
        shared_ptr<pdf> pdf_ptr;
        bool skip_pdf;
        ray skip_pdf_ray;
    };

    /**
     * @class material
     * @brief Abstract base class representing a material in a ray tracing context.
     *
     * Materials define how rays interact with surfaces. This base class provides the interface for
     * scattering behavior, such as reflection, refraction, or diffusion.
     * Derived classes must implement the `scatter` function to define their specific behavior.
     */
    class material
    {
    public:
        /// Virtual destructor to ensure proper cleanup of derived material classes.
        virtual ~material() = default;

        /**
         * @brief Returns the emitted color from the material at a point.
         *
         * Most materials do not emit light, so the default implementation
         * returns black (no emission). Materials that do emit light (like
         * `diffuse_light`) should override this method.
         *
         * @param r_in The incoming ray that hit the surface.
         * @param rec A hit record containing details of the intersection.
         * @param u Texture coordinate u.
         * @param v Texture coordinate v.
         * @param p World-space point of emission.
         * @return The emitted color, which is black by default.
         */
        virtual vec3 emitted(const ray &r_in, const hit_record &rec, double u, double v, const vec3 &p) const
        {
            return vec3(0, 0, 0);
        }

        /**
         * @brief Computes how an incoming ray scatters upon hitting a surface.
         *
         * This method will be overridden by derived material types (e.g., Lambertian, Metal, Dielectric).
         *
         * @param r_in The incoming ray that hit the surface.
         * @param rec A hit record containing details of the intersection.
         * @param attenuation The attenuation (color) applied to the scattered ray.
         * @param scattered The scattered ray generated by the material.
         * @param pdf The value of the pdf, for importance sampling.
         * @return True if the ray is scattered, false otherwise.
         */
        virtual bool scatter(const ray &r_in, const hit_record &rec, scatter_record &srec) const
        {
            return false;
        }

        virtual double scattering_pdf(const ray &r_in, const hit_record &rec, const ray &scattered)
            const
        {
            return 0;
        }
    };
}
